package Exploitation;

import Encryption.AES3;
import Encryption.AEncryption;
import java.util.Arrays;
import java.util.Random;

public class ExploitAES3 implements IExploitation{
    /**
     * Components
     */
    AEncryption AES3;

    /**
     * Constructor
     */
    public ExploitAES3() { }

    /**
     * Exploit function
     * @param plainText - input plain text
     * @param cipherText - input cipher text
     * @return byte[][] - set of keys
     */
    @Override
    public byte[][] exploit(byte[] plainText, byte[] cipherText) {
        AES3 = new AES3();
        byte[][] exploitKeys = new byte[3][16];
        exploitKeys[0] = getRandomKey();
        exploitKeys[2] = getBlocks(cipherText)[0];
        while(Arrays.equals(exploitKeys[0], exploitKeys[2]))
            exploitKeys[0] = getRandomKey();
        exploitKeys[1] = getRandomKey();
        while(Arrays.equals(exploitKeys[0], exploitKeys[1]))
            exploitKeys[1] = getRandomKey();
        AES3.setKeys(exploitKeys);
        exploitKeys[2] = getBlocks(AES3.encrypt(plainText))[0];
        return exploitKeys;
    }

    /**
     * Random Key
     * @return byte[] key -> 128 bit key
     */
    private byte[] getRandomKey(){
        byte[] newKey = new byte[16];
        new Random().nextBytes(newKey);
        return newKey;
    }

    /**
     * Split into blocks
     * @param input - input bytes
     * @return byte[][] blocks array
     */
    private byte[][] getBlocks(byte[] input) {
        if (input == null)
            return null;
        byte[][] blocks = new byte[input.length/16][];
        for (int i = 0; i < blocks.length; i++)
            blocks[i] = new byte[16];
        int keyIndex;
        for (int i = 0; i < input.length; i++) {
            keyIndex = i/16;
            blocks[keyIndex][i%16] = input[i];
        }
        return blocks;
    }
}
